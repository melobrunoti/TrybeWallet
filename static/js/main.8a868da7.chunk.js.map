{"version":3,"sources":["services/api.js","actions/index.js","pages/Login.js","components/ExpensesForm.js","components/ExpensesTable.js","components/Header.js","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["requestApi","fetch","res","json","data","Login","props","handleLogin","login","history","state","email","push","password","includes","endsWith","length","this","className","data-testid","placeholder","type","value","onChange","e","setState","target","disabled","userValidate","onClick","Component","connect","dispatch","payload","INITIAL_STATE","description","currency","method","tag","PAYMENT_METHOD","TAGS","Expenses","handleSubmit","add","expenses","id","handleChange","name","currencies","htmlFor","Object","keys","filter","curr","map","coin","key","m","t","wallet","expense","exchangeRates","ExpensesTable","deleteExpense","Number","ask","toFixed","Header","totalExpenses","total","reduce","acc","cur","userLogin","user","Wallet","ExpensesForm","React","App","exact","path","component","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a868da7.chunk.js","sourcesContent":["export default async function requestApi() {\n  const res = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await res.json();\n  return data;\n}\n","import requestApi from '../services/api';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const userLogin = (payload) => ({ type: 'USER_LOGIN', payload });\n\nexport const getCurrency = () => async (dispatch) => {\n  const currencies = await requestApi();\n  dispatch({ type: GET_CURRENCY, payload: currencies });\n};\nexport const addExpense = (payload) => async (dispatch) => {\n  const currencies = await requestApi();\n  dispatch({\n    type: ADD_EXPENSE,\n    payload: { ...payload, exchangeRates: currencies },\n  });\n};\nexport const removeExpense = (payload) => ({\n  type: REMOVE_EXPENSE,\n  payload,\n});\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { userLogin } from '../actions';\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  handleLogin = () => {\n    const { login, history } = this.props;\n    const { email } = this.state;\n\n    login(email);\n    history.push('/carteira');\n  };\n\n  userValidate(email, password) {\n    const PASSWORD_MAX_LENGTH = 6;\n    return (\n      email.includes('@') && email.endsWith('.com')\n      && password.length >= PASSWORD_MAX_LENGTH\n    );\n  }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <div className='login-page' >\n        <div className='login'>\n          <div className='login__box'>\n            <h1 className='login__title' >Trybe Wallet</h1>\n            <input\n              className='login__input'\n              data-testid=\"email-input\"\n              placeholder='email'\n              type=\"text\"\n              value={ email }\n              onChange={ (e) => this.setState({ email: e.target.value }) }\n            />\n            <input\n              className='login__input'\n              data-testid=\"password-input\"\n              placeholder='password'\n              value={ password }\n              type=\"password\"\n              onChange={ (e) => this.setState({ password: e.target.value }) }\n            />\n            <button\n              className='login__button'\n              type=\"button\"\n              disabled={ !this.userValidate(email, password) }\n              onClick={ this.handleLogin }\n            >\n            Entrar\n            </button>\n            </div>\n          </div>\n        <div className='login-wallet-box'> \n      </div>\n    </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  login: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (email) => dispatch(userLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addExpense, getCurrency } from '../actions';\n\n// references : https://dev.to/antdp425/populate-dropdown-options-in-react-1nk0\n\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  currency: 'USD',\n  method: '',\n  tag: '',\n};\n\nconst PAYMENT_METHOD = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst TAGS = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\nconst CHOOSE = 'Escolha uma opção';\n\nexport class Expenses extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    const { fetch } = this.props;\n    fetch();\n  }\n\n  handleSubmit = () => {\n    const {\n      add,\n      expenses,\n    } = this.props;\n\n    add({\n      id: expenses.length,\n      ...this.state,\n    });\n\n    this.setState({ ...INITIAL_STATE });\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const { value, description, method, tag, currency } = this.state;\n    const { currencies } = this.props;\n    return (\n      <form className='form' >\n        <label className='form__label'  htmlFor=\"value\">\n          Valor\n          <input\n            className='form__input'\n            data-testid=\"value-input\"\n            type=\"number\"\n            id=\"value\"\n            name=\"value\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label className='form__label' htmlFor=\"description\">\n          Descrição\n          <input\n            className='form__input'\n            data-testid=\"description-input\"\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label className='form__label' htmlFor=\"currency\">\n          Moedas\n          <select\n            className='form__select'\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            id=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            { Object.keys(currencies).filter((curr) => curr !== 'USDT').map((coin) => (\n              <option key={ coin } name={ coin } value={ coin }>\n                { coin }\n              </option>)) }\n            getCurrencies\n          </select>\n        </label>\n        <label className='form__label' htmlFor=\"payment-method\">\n          Método de pagamento\n          <select\n            className='form__select'\n            data-testid=\"method-input\"\n            id=\"payment-method\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option value=\"\">{CHOOSE}</option>\n            { PAYMENT_METHOD.map((m) => (\n              <option key={ m } name={ m } value={ m }>\n                { m }\n              </option>)) }\n\n          </select>\n        </label>\n        <label className='form__label' htmlFor=\"tag\">\n          Categoria\n          <select\n            className='form__select'\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            id=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value=\"\">{CHOOSE}</option>\n            { TAGS.map((t) => (\n              <option key={ t } value={ t }>\n                { t }\n              </option>)) }\n\n          </select>\n        </label>\n        <button\n          className='form__button'\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Adicionar Despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nExpenses.propTypes = {\n  fetch: PropTypes.func.isRequired,\n  add: PropTypes.func.isRequired,\n  currencies: PropTypes.any.isRequired,\n  expenses: PropTypes.arrayOf(Object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetch: () => dispatch(getCurrency()),\n  add: (expense) => dispatch(addExpense(expense)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { removeExpense } from '../actions';\n\nexport class ExpensesTable extends Component {\n  render() {\n    const { expenses, deleteExpense } = this.props;\n    return (\n      <div className='table-section' >\n        <table className='table'>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Moeda de conversão</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda Base</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          {expenses.map((expense) => (\n            <tr key={ expense.id }>\n              <td>{expense.description}</td>\n              <td>{expense.tag}</td>\n              <td>{expense.method}</td>\n              <td>{expense.value}</td>\n              <td>{expense.currency}</td>\n              <td>{expense.exchangeRates[expense.currency].name}</td>\n              <td>\n                {Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}\n              </td>\n              <td>\n                {(\n                  expense.value * expense.exchangeRates[expense.currency].ask\n                ).toFixed(2)}\n              </td>\n              <td>\n                Real\n              </td>\n              <td>\n                <button\n                  className='table__button'\n                  data-testid=\"delete-btn\"\n                  type=\"button\"\n                  onClick={ () => deleteExpense(expense) }\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.array.isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expense) => dispatch(removeExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport class Header extends Component {\n  totalExpenses = () => {\n    const { total } = this.props;\n    if (total.length === 0) {\n      return 0;\n    }\n    return total.reduce((acc, cur) => {\n      const { value, currency, exchangeRates } = cur;\n      return acc + (exchangeRates[currency].ask * value);\n    }, 0).toFixed(2);\n  };\n\n  render() {\n    const { userLogin } = this.props;\n    return (\n      <div className='header'>\n        <div className='header__total'>\n          <p data-testid=\"total-field\">\n            { this.totalExpenses() }\n          </p>\n          <p className='coin' data-testid=\"header-currency-field\">BRL</p>\n        </div>\n        <div className='header__email' >\n          <p data-testid=\"email-field\">{ userLogin }</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  total: PropTypes.array.isRequired,\n  userLogin: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userLogin: state.user.email,\n  total: state.wallet.expenses });\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport ExpensesForm from '../components/ExpensesForm';\nimport ExpensesTable from '../components/ExpensesTable';\nimport Header from '../components/Header';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <div className='wallet'>\n          <ExpensesForm />\n          <ExpensesTable />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import { USER_LOGIN } from '../actions';\n\nconst initialState = {\n  email: '',\n};\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n  case USER_LOGIN:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { GET_CURRENCY, ADD_EXPENSE, REMOVE_EXPENSE } from '../actions';\n\nconst initialState = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default function walletReducer(state = initialState, action) {\n  switch (action.type) {\n  case GET_CURRENCY:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((e) => e.id !== action.payload.id),\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n// import wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}